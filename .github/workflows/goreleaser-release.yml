name: goreleaser

on:
  push:
    tags:
      - '*'

permissions:
  contents: write
  # packages: write
  # issues: write

env:
  GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  TAG_NAME: ${{ github.ref_name }}
  CLI_REPO: 'huyongqii/tap-test'
  CLI_NAME: 'kbcli'
  GITLAB_ACCESS_TOKEN: ${{ secrets.GITLAB_ACCESS_TOKEN }}
  FURY_TOKEN: ${{ secrets.FURY_UPLOAD_TOKEN }}
  FURY_ACCOUNT: 'huyongqii'

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v4
        with:
          go-version: "1.20"
      - run: |
          git fetch --force --tags
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            libbtrfs-dev \
            libdevmapper-dev

      #      - name: Import GPG key
#        id: import_gpg
#        uses: crazy-max/ghaction-import-gpg@v5
#        with:
#          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
#          passphrase: ${{ secrets.PASSPHRASE }}
#
      - uses: goreleaser/goreleaser-action@v4
        with:
          distribution: goreleaser
          version: latest
          args: release --config ${{ github.workspace }}/.goreleaser.yaml --clean
        env:
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}

#      - name: upload .rpm and .deb to fury.io
#        run: |
#          for file in $(find "${{ github.workspace }}/dist" -type f | grep -E '\.(deb|rpm)$'); do
#            curl -F package=@$file https://${{ env.FURY_TOKEN }}@push.fury.io/${{ env.FURY_ACCOUNT }}/
#          done

      - name: upload asset
        run: |
          pwd
          ls dist
          mkdir dist/assets
          for file in $(find "${{ github.workspace }}/dist" -type f | grep -E '\.(gz|zip)$'); do
            echo "Processing file: $file"
            cp $file ./dist/assets
          done
          ls dist/assets

      - name: Create Release With Asset
        uses: Hs1r1us/Release-AIO@v2.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          asset_files: '${{ github.workspace }}/dist/assets'


      - name: Duplicate Release With Asset to public_Repo
        uses: Hs1r1us/Release-AIO@v2.0.0
        env:
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
        with:
          tag_name: 'inherit' # Must use 'inherit' to get the latest release
          body: 'hello world' # Will be added in the new release
          repo: ${{ env.CLI_REPO }} # The format is like owner/repo
          asset_files: '${{ github.workspace }}/dist/kbcli_windows_amd64_v1/${{ env.CLI_NAME }}.exe' # Will be added in the new release



#      - name: get release kbcli upload url
#        run: |
#          echo 'UPLOAD_URL='`bash ${{ github.workspace }}/.github/utils/utils.sh \
#            --tag-name ${{ env.TAG_NAME }} \
#            --type 3 \
#            --github-repo ${{ env.CLI_REPO }} \
#            --github-token ${{ env.GITHUB_TOKEN }}` >> $GITHUB_ENV
#
#      - name: upload kbcli binary release for winget
#        uses: actions/upload-release-asset@main
#        with:
#          upload_url: ${{ env.UPLOAD_URL }}
#          asset_path: ${{ github.workspace }}/dist/kbcli_windows_amd64_v1/${{ env.CLI_NAME }}.exe
#          asset_name: ${{ env.CLI_NAME }}.exe
#          asset_content_type: application/octet-stream
