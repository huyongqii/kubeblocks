name: goreleaser

on:
  push:
    tags:
      - '*'

permissions:
  contents: write
  # packages: write
  # issues: write

env:
  GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  TAG_NAME: ${{ github.ref_name }}
  CLI_REPO: 'huyongqi/tap-test'
  CLI_NAME: 'kbcli'
  GITLAB_ACCESS_TOKEN: ${{ secrets.GITLAB_ACCESS_TOKEN }}
  FURY_TOKEN: ${{ secrets.FURY_UPLOAD_TOKEN }}
  FURY_ACCOUNT: 'huyongqii'

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v4
        with:
          go-version: "1.20"
      - run: |
          git fetch --force --tags
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            libbtrfs-dev \
            libdevmapper-dev
          
          mkdir tmp
          cd tmp  
          touch xx.txt
          cd ..
          tar -czvf archive.tar.gz tmp
          tar -czvf archive2.tar.gz tmp
          pwd
          ls
      

      #      - name: Import GPG key
#        id: import_gpg
#        uses: crazy-max/ghaction-import-gpg@v5
#        with:
#          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
#          passphrase: ${{ secrets.PASSPHRASE }}
#
#      - uses: goreleaser/goreleaser-action@v4
#        with:
#          distribution: goreleaser
#          version: latest
#          args: release --config ${{ github.workspace }}/.goreleaser.yaml --clean
#        env:
#          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
#          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}

#      - name: upload .rpm and .deb to fury.io
#        run: |
#          for file in $(find "${{ github.workspace }}/dist" -type f | grep -E '\.(deb|rpm)$'); do
#            echo "Processing file: $file"
#            curl -F package=@$file https://${{ env.FURY_TOKEN }}@push.fury.io/${{ env.FURY_ACCOUNT }}/
#          done

#      - name: Upload GitHub release assets
#        uses: vesoft-inc/upload-assets@v1.0.0
#        with:
#          asset-path: ${{ github.workspace }}/dist

#      - name: Upload Release Assets
#        uses: alexellis/upload-assets@0.4.0
#        env:
#          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
#        with:
#          asset_paths: '["${{ github.workspace }}/find.sh"]'

#      - name: Create Release
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: ${{ github.ref }}
#          release_name: Release ${{ github.ref }}
#          draft: false
#          prerelease: false

#      - name: Upload Release Asset
#        id: upload-release-asset
#        uses: sekwah41/upload-release-assets@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
#          asset_path: |
#            ${{ github.workspace }}/find.sh
#          asset_name: my-artifact.zip
#          asset_content_type: application/gzip


      - name: Upload assets to a Release
        uses: AButler/upload-release-assets@v2.0.2
        with:
          files: '${{ github.workspace }}/*.sh'
          repo-token: ${{ secrets.GITHUB_TOKEN }}



#      - name: get release kbcli upload url
#        run: |
#          echo 'UPLOAD_URL='`bash ${{ github.workspace }}/.github/utils/utils.sh \
#            --tag-name ${{ env.TAG_NAME }} \
#            --type 3 \
#            --github-repo ${{ env.CLI_REPO }} \
#            --github-token ${{ env.GITHUB_TOKEN }}` >> $GITHUB_ENV
#
#      - name: upload kbcli binary release for winget
#        uses: actions/upload-release-asset@main
#        with:
#          upload_url: ${{ env.UPLOAD_URL }}
#          asset_path: ${{ github.workspace }}/dist/kbcli_windows_amd64_v1/${{ env.CLI_NAME }}.exe
#          asset_name: ${{ env.CLI_NAME }}.exe
#          asset_content_type: application/octet-stream
